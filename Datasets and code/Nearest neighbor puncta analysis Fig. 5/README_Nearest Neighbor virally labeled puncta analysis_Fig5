Analysis performed using Jupyter Notebook environment (version 6.4.5) in a Python 3 ipykernel. 

Centroid X-Y coordinates of virally-labeled Purkinje cell puncta were extracted using FIJI software from confocal images acquired at 20x magnification on a Zeiss LSM800 microscope. The X-Y coordinates coordinates represent the centroid point for each punctum after thresholding each stack. Distances between puncta were measured for each centroid across imaging channels, i.e. the distances between puncta in the same imaging channel were not measured, but distance between puncta with the closest coordinates were measured across channel 1 and channel 2.
Distances were measured for each image in a stack and stacks were not compressed into a single image. Images in the stack that did not include many puncta (usually at the beginning and/or end of a stack of 10+ images acquired at 2 micron increments) were excluded, and images where both channels exhibited viral labeling were used for measurement.   
An example set of coordinates for each channel for Animal_ID1 slice #5 (in a stack of 13 images where slices #5-13 were included for analysis) are included here as two .csv files for demonstrative purposes. For the complete dataset, nearest-neighbor distances were queried for each included slice for each animal and the distances for each channel and slice were concatenated to identify the percentiles of nearest-neighbor distances from 0 microns to X microns. 

The code relies on SciPy's KD spatial tree functionality to identify k-dimensional points for a nearest-neighbor lookup, querying coordinates across .csv files. The code also outputs the percent of puncta located within X micron distance from a punctum in the opposite imaging channel. Here we have defaulted to printing the range from 0 microns to 100 microns. 

Run time in Jupyter notebook takes a few seconds. 

Instructions: 
1. Install Python 3 and necessary files to run a Jupyter notebook environment. 
2. Download .csv files and the Python file including the function necessary to demo the analysis performed in Fig. 5.
3. Install the packages and run the function 'comparedistances(csv1,csv2)' from the accompanying Python file, with parameters of csv1 and csv2 denoting the file path for the two .csv files included in this folder.
4. Outputs the percentile for punch within X range (0 to 100 microns is default, but can be edited in the code). Uncommenting the "print" function shows the distances between puncta across channels, in addition to the percentiles.
